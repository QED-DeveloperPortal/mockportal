@page "/apiproducts"
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.IO;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h4>Application Catalogue Products</h4>
<div>
    <section class="api-master-container">
        @* @foreach (var apiProduct in apiProducts)
        {
            <article class="app-cat-container">
                <div class="app-cat-avatar" title="@apiProduct.ShortName" rel="tag" style="background-color: #203A90;">@apiProduct.ShortName</div>
                @if (!string.IsNullOrEmpty(@apiProduct.OverlayText))
                {
                    <div class="app-cat-overlay" title="@apiProduct.OverlayText" rel="tag">@apiProduct.OverlayText</div>
                }
                <div class="app-cat-detail-container">
                    <div class="app-cat-name">@apiProduct.Title</div>
                    <div>@apiProduct.ApiCount APIs</div>
                    <div class="app-cat-description">@apiProduct.Description</div>
                </div>
            </article>
        }*@

        @foreach (var group in appCatGroups)
        {
            var code = group.GroupCode;
            <article class="app-cat-container">
                <div class="app-cat-avatar" title="@group.ShortCode" rel="tag" style="background-color: #203A90;" onclick=@(() => OpenApiDetails(code))>@group.ShortCode</div>
                @if (!string.IsNullOrEmpty(@group.OverlayText))
                {
                    <div class="app-cat-overlay" title="@group.OverlayText" rel="tag">@group.OverlayText</div>
                }
                <div class="app-cat-detail-container">
                    <div class="app-cat-name">@group.GroupName</div>
                    @* <div>@group.ApiCount APIs</div> *@
                    <div class="app-cat-description">@group.GroupDescription</div>
                </div>
            </article>
        }

    </section>
</div>

@code {

    public class  ApiProduct
    {
        public string ShortName {get;set;}
        public string OverlayText {get;set;}
        public string Title {get;set;}
        public int ApiCount {get;set;}
        public string Description {get;set;}
    }

    List<ApiProduct> apiProducts = new List<ApiProduct>();

    @* [CascadingParameter] public IModalService Modal { get; set; } = default!; *@

    private string selectedItem;

    private List<Item> SelectedValues = new List<Item>();

    private List<Item> SelectedItems = new List<Item>();

    private StandaloneCodeEditor _editor = null!;
    private string _valueToSet = "";
    private string _fileName = "";
    private string _folderName = "";
    private string _statusMessage = "";

    private string _param1 = "";
    private string _param2 = "";
    private string _param3 = "";
    private string _param4 = "";

    private string _results="";

    private string _errorMessage = "";

    public async ValueTask DisposeAsync()
    {
        /*if(JSModule.IsValueCreated)
        {
            await JSModule.Value.DisposeAsync();
        }*/
    }

    private class Item
    {
        public string Self { get; set; }
        public int Level { get; set; }
        public string Parent { get; set; }
    }

    private List<Item> _rootItem = new List<Item>();

    private Object _lock = new Object();

    private async Task OpenApiDetails(string code)
    {
        NavigationManager.NavigateTo($"{Constants.UrlPrefix}/apiproductmethods/{code}");
        //Console.WriteLine("OpenApiDetails");

    }

    private async Task<List<Item>> GetChildrenAsync(Item item)
    {
        Console.WriteLine("GetChildren");
        
        if (item == null)
        {
            Console.WriteLine("return _rootItem");
            return _rootItem;
        }
        else if (item.Level == 0)
        {
            Console.WriteLine("item.Level == 0");
            using var response = await Http.GetAsync($"{Constants.ApiBaseUrl}__getmockfolderfiles/?folderName={item.Self}");
            var results = await response.Content.ReadFromJsonAsync<string[]>();

            var items = new List<Item>();
            foreach (var result in results)
            {
                if (!string.IsNullOrEmpty(result.Trim()))
                {
                    items.Add(new Item { Self = result, Level = 1, Parent = item.Self });
                }
            }

            Console.WriteLine("returning Level 1 items");
            return items;
        }
        else
        {
            Console.WriteLine($"else {item.Self}");
            return _rootItem;
        }
    }

    private async Task<bool> HasChildrenAsync(Item item)
    {
        if (item.Level == 0) 
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private string GetParent(string item)
    {
        var last_period = item.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return item.Substring(0, last_period);
        }
    }

    bool initialised = false;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");

        // await RefreshFolders();

        apiProducts.Add(new ApiProduct { ShortName = "At", OverlayText = "Beta", Title = "Attendance/Roll marking", ApiCount = 2, Description = "Attendance/Roll marking systems" });
        apiProducts.Add(new ApiProduct { ShortName = "Bo", OverlayText = "Beta", Title = "Booking systems", ApiCount = 4, Description = "Booking systems, including parent teacher interviews" });
        apiProducts.Add(new ApiProduct { ShortName = "Co", Title = "Consent Management", ApiCount = 6, Description = "Consent management systems" });

        initialised = true;

        await GetAppCatalogGroups();

        Console.WriteLine("OnInitializedAsync complete");            
    }

    #region TreeView Events
    private async Task OnLoadStart()
    {
        try
        {
            Console.WriteLine("ONLOADSTART");

            //await RefreshFolders();

            await GetAppCatalogGroups();

            _errorMessage = "LOADED!";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in OnLoadStart: {ex.Message}");
        }
    }

    private async Task OnSelect(Item item)
    {
        try
        {
            Console.WriteLine("ONSELECT");
            
            @* var parameters = new ModalParameters()
                .Add(nameof(DisplayMessage.Message), "Hello, World!"); *@
                        
            Console.WriteLine("ONSELECT 1.6");

            @* var options = new ModalOptions
            {
                AnimationType = ModalAnimationType.None
            }; *@

            Console.WriteLine("ONSELECT 2");
            
            _results = "";

            if (!initialised) return;

            if (item.Level == 0) // Folder
            {
                _folderName = item.Self;
            }
            else if (item.Level == 1) // File
            {
                _folderName = item.Parent;
                _fileName = item.Self;

                using var response = await Http.GetAsync($@"{Constants.ApiBaseUrl}__getmockfolderfilecontents?folderName={_folderName}&fileName={_fileName}");
                var contents = await response.Content.ReadFromJsonAsync<string>();

                await _editor.SetValue(contents);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in OnLoadStart: {ex.Message}");
        }
    }

    @* void ShowModalCustomOverlay()
    {
        var options = new ModalOptions { OverlayCustomClass = "custom-modal-overlay" };
        Modal.Show<Confirm>("Custom Overlay", options);
    }

    void PositionCustom(ModalPosition position)
    {
        var options = new ModalOptions { Position = position };

        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";

        Modal.Show<Confirm>($"Position: {position}", options);
    } *@

    @* async Task<ModalResult> ShowConfirmDeleteModal()
    {
        var modal = Modal.Show<Confirm>("Are you sure you want to delete this record?");
        var result = await modal.Result;

        if (!result.Cancelled && (result.Data is bool accepted) && accepted)
        {
            //Navigator.NavigateTo ("/");
            return result;
        }

        return result;
    } *@

    #endregion // TreeView Events

    private string GetBody(string contents)
    {
        var body = "";

        try
        {
            var obj = JsonSerializer.Deserialize<JsonNode>(contents);
            body = JsonSerializer.Serialize(obj["request"]["body"]);
            
            Console.WriteLine($"GetBody: {body}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetBody: {ex.Message}");
        }

        return body;
    }

    private String GetRequestType(string contents)
    {
        var requestType = "";

        try
        {
            var obj = JsonSerializer.Deserialize<JsonNode>(contents);
            requestType = JsonSerializer.Serialize(obj["request"]["method"]);
            requestType = requestType.Replace("\"", "");
            requestType = requestType.Replace("\'", "");
            
            Console.WriteLine($"GetRequestType: {requestType}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetRequestType: {ex.Message}");
            return "EXCEPTION";
        }

        return requestType;
    }

    private string GetUrl(string contents)
    {
        var url = "";

        Console.WriteLine($"GetUrl contents: {contents}");

        try
        {
            var obj = JsonSerializer.Deserialize<JsonNode>(contents);
            url = JsonSerializer.Serialize(obj["request"]["route"]);
            url = url.Replace("\"", "");
            url = url.Replace("\'", "");

            Console.WriteLine($"GetUrl: {url}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetUrl {ex.Message}");
        }

        return url;
    }

    private async Task GetMockRoutes()
    {
        var mockRoutesUrl = $"{Constants.ApiBaseUrl}__getmockroutes";
        using var responseRoutes = await Http.GetAsync($"{mockRoutesUrl}");
        Console.WriteLine($"response.StatusCode {responseRoutes.StatusCode}");
        var routes = await responseRoutes.Content.ReadAsStringAsync();
        var routeList = routes.Split(",");
        foreach (var route in routeList)
        {
            Console.WriteLine($"route: {route}");
        }
    }

    private async Task GetMockMethods()
    {
        var url = $"{Constants.ApiBaseUrl}__getmockmethods";
        using var response = await Http.GetAsync($"{url}");
        Console.WriteLine($"response.StatusCode {response.StatusCode}");
        var methods = await response.Content.ReadAsStringAsync();
        var methodList = methods.Split(",");
        foreach (var method in methodList)
        {
            Console.WriteLine($"method: {method}");
        }
    }

    private List<string> GetUrlParameterNames(string url)
    {
        var parameterNames = new List<string>();

        return parameterNames;
    }
    
    List<AppCatGroup> appCatGroups = new List<AppCatGroup>();

    private async Task GetAppCatalogGroups()
    {
        try
        {
            Console.WriteLine("GetAppCatalogGroups");

            using var response = await Http.GetAsync($"{Constants.ApiBaseUrl}__getappcataloggroups");
            Console.WriteLine($"GetAppCatalogGroups response {response.StatusCode}");
            appCatGroups = await response.Content.ReadFromJsonAsync <List<AppCatGroup>>();
            if (appCatGroups == null)
            {
                Console.WriteLine("No App Catalog Groups Found");
            }
            else
                Console.WriteLine($"AppCatalogGroups Count: {appCatGroups.Count}");

            foreach (var group in appCatGroups)
            {
                Console.WriteLine($"{group.GroupName}, {group.GroupDescription}, {group.ShortCode}");
            }

            //RemoveMissingFoldersFromRootItem(folders);
            //_rootItem = await Task.Run(() =>  PopulateRootItem(folders));
            //Console.WriteLine($"Refresh Folders 3 {_rootItem.Count}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetAppCatGroups: {ex.Message}");
        }
    }

    private async Task RefreshFolders()
    {
        try
        {
            Console.WriteLine("Refresh Folders 1");

            using var response = await Http.GetAsync($"{Constants.ApiBaseUrl}__getmockfolders");
            Console.WriteLine($"GetMockFolders response {response.StatusCode}");
            var folders = await response.Content.ReadFromJsonAsync <List<string>>();
            if (folders == null)
            {
                Console.WriteLine("No folders found");
            }
            else
                Console.WriteLine($"Folders Count: {folders.Count}");

            foreach (var f in folders)
            {
                Console.WriteLine($"{f}");
            }
            //_rootItem.Clear();
            Console.WriteLine("Refresh Folders 2");

            RemoveMissingFoldersFromRootItem(folders);
            _rootItem = await Task.Run(() =>  PopulateRootItem(folders));
            Console.WriteLine($"Refresh Folders 3 {_rootItem.Count}");

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetMockFolderFiles: {ex.Message}");
        }
    }

    private async Task<List<Item>> PopulateRootItem(List<string> folders)
    {
        var itemList = new List<Item>();

        foreach (var folderName in folders)
        {
            var found = false;
            var index = 0;
            foreach (var item in _rootItem)
            {
                if (string.Compare(item.Self, folderName) > 0)
                {
                    itemList.Insert(index, new Item { Self = folderName, Level = 0 });
                    found = true;
                    break;
                }
                if (item.Self == folderName)
                {
                    found = true;
                    break;
                }
                index++;
            }

            if (!found)
            {
                itemList.Add(new Item { Self = folderName, Level = 0 });
            }    
        }

        return itemList;
    }

    private void RemoveMissingFoldersFromRootItem(List<string> folders)
    {
        List<Item> removeList = new List<Item>();

        foreach (var item in _rootItem)
        {
            var found = false;
            foreach (var folder in folders)
            {
                if (folder == item.Self)
                {
                    found = true;
                    break;
                }
            }

            if (!found)
                removeList.Add(item);
        }

        foreach (var item in removeList)
        {
            _rootItem.Remove(item);
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "javascript",
                GlyphMargin = true,
                Value = ""
            };
    }

    private async Task EditorOnDidInit()
    {
        /*await _editor.AddCommand((int)BlazorMonaco.KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        decorationIds = await _editor.DeltaDecorations(null, newDecorations);*/
        // You can now use 'decorationIds' to change or remove the decorations
    }
    private string[] decorationIds = new string[0];

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }
}