@page "/lazy"
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.IO;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using System.Dynamic;
@inject HttpClient Http

<h4>Default loading template</h4>
<div>
    <TreeViewAsync @key="_rootItem" GetChildrenAsync="GetChildrenAsync" HasChildrenAsync="HasChildrenAsync" AllowSelection="false" SelectedItems="SelectedItems">
        <ItemTemplate>
            <!-- div style="background-color: @(selectedItem == context.Item.Self ? "Highlight" : "inherit")">-->
             <label @onclick="() => OnSelect(context.Item)" >@context.Item.Self</label>
            <!--</div>-->
        </ItemTemplate>
    </TreeViewAsync>
</div>

<div style="margin:10px 0;">
    <label style="color: red;">@_statusMessage</label>
</div>

<div style="margin:10px 0;">
    <button @onclick="SaveMockFolder">Save Folder</button>
    Folder: <input type="text" @bind="_folderName" style="width: 300px;" />
    <button @onclick="DeleteMockFolder">Delete Folder</button>
</div>
<div style="margin:10px 0;">
    <button @onclick="SaveMockFolderFile">Save JSON (Ctrl+J)</button>
    Filename: <input type="text" @bind="_fileName" style="width: 300px;" />
    <button @onclick="DeleteMockFolderFile">Delete File</button>
</div>

<div style="margin:10px 0;">
    <div>
        <div>Parameter 1: <input type="text" @bind="_param1" style="width: 300px;" /></div>
    </div>
    <div>
        <div>Parameter 2: <input type="text" @bind="_param2" style="width: 300px;" /></div>
    </div>
    <div>
        <div>Parameter 3: <input type="text" @bind="_param3" style="width: 300px;" /></div>
    </div>
    <div>
        <div>
            Parameter 4: <input type="text" @bind="_param4" style="width: 300px;" />
            <button @onclick="TestParameters">Test</button>
        </div>

    </div>
</div>
<div>
    <div>
        <textarea rows="10" cols="60" name="_results" @bind="_results" placeholder="query results..."></textarea>
    </div>
</div>

<div style="margin:10px 0; height:400px;">
    <StandaloneCodeEditor @ref="_editor" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" CssClass="editor-class" />
</div>

@code {
    const string apiBaseUrl = "https://mockaco.azurewebsites.net/";

    private string selectedItem;

    private List<Item> SelectedValues = new List<Item>();

    private List<Item> SelectedItems = new List<Item>();

   // private TreeView _tv = null;

    private StandaloneCodeEditor _editor = null!;
    private string _valueToSet = "";
    private string _fileName = "";
    private string _folderName = "";
    private string _statusMessage = "";

    private string _param1 = "";
    private string _param2 = "";
    private string _param3 = "";
    private string _param4 = "";

    private string _results="";

    private class Item
    {
        public string Self { get; set; }
        public int Level { get; set; }
        public string Parent { get; set; }
    }


    /*private class Item
    {
        public string Self { get; set; }
    }*/

    private List<Item> _rootItem = new List<Item>();

    private Object _lock = new Object();

    private async Task<List<Item>> GetChildrenAsync(Item item)
    {
        Console.WriteLine("GetChildren");
        
        if (item == null)
        {
            Console.WriteLine("return _rootItem");
            return _rootItem;
        }
        else if (item.Level == 0)
        {
            Console.WriteLine("item.Level == 0");
            using var response = await Http.GetAsync($"{apiBaseUrl}__getmockfolderfiles/?folderName={item.Self}");
            var results = await response.Content.ReadFromJsonAsync<string[]>();

            var items = new List<Item>();
            foreach (var result in results)
            {
                if (!string.IsNullOrEmpty(result.Trim()))
                {
                    items.Add(new Item { Self = result, Level = 1, Parent = item.Self });
                }
            }

            Console.WriteLine("returning Level 1 items");
            return items;
        }
        else
        {
            Console.WriteLine($"else {item.Self}");
            return _rootItem;
        }

/*        if (item == null)
        {
            Console.WriteLine("Item == null");
            var temp = new Item {Self = "hello", Level = 0 };
            return new List<Item>(){temp};
        }

        if (!initialised || string.IsNullOrEmpty(item.Self)) return null;

        if (item.Level == 0)
        {
            //using var response = Http.GetAsync($"http://127.0.0.1:5010/__getmockfolderfiles/?folderName={item.Self}").Result;
            
            using var response = await Http.GetAsync($"http://127.0.0.1:5010/__getmockfolderfiles/?folderName={item.Self}");
            Console.WriteLine("GetChildren 2");
            //var preResult = await response.Content.ReadFromJsonAsync<string[]>();
            var results = await response.Content.ReadFromJsonAsync<string[]>();
            Console.WriteLine("GetChildren 3");
*/
            //if (preResult.Status == TaskStatus.Faulted) return null;

            /*using var response = await Http.GetAsync($"http://127.0.0.1:5010/__getmockfolders");
            var folders = await response.Content.ReadFromJsonAsync <List<string>>();
            //_rootItem.Clear();
            Console.WriteLine("Refresh Folders 2");

            RemoveMissingFoldersFromRootItem(folders);
            _rootItem = await Task.Run(() =>  PopulateRootItem(folders));
            Console.WriteLine($"Refresh Folders 3 {_rootItem.Count}");*/

            //var results = preResult; //.Result;
/*            Console.WriteLine(response.StatusCode.ToString());
            var items = new List<Item>();
            foreach (var result in results)
            {
                if (!string.IsNullOrEmpty(result.Trim()))
                {
                    //items.Add(new Item { Self = result, Level = 1, Parent = item.Self });
                    items.Add(new Item { Self = result }); //, Level = 1, Parent = item.Self });
                }
            }

            Console.WriteLine("returning items");
            return items;

            //return null;
        }

        Console.WriteLine("returning null");
        return null;*/
            }

    //    return null;
    //}

    //private bool HasChildren(Item item)
    private async Task<bool> HasChildrenAsync(Item item)
    {
        if (item.Level == 0) 
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private string GetParent(string item)
    {
        var last_period = item.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return item.Substring(0, last_period);
        }
    }

    bool initialised = false;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        await RefreshFolders();

        initialised = true;
        Console.WriteLine("OnInitializedAsync complete");
    }

    #region TreeView Events
    private async Task OnLoadStart()
    {
        try
        {
            Console.WriteLine("ONLOADSTART");

            await RefreshFolders();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in OnLoadStart: {ex.Message}");
        }
    }

    private async Task OnSelect(Item item)
    {
        try
        {
            Console.WriteLine("ONSELECT");
            
            _results = "";

            if (!initialised) return;

            if (item.Level == 0) // Folder
            {
                _folderName = item.Self;
            }
            else if (item.Level == 1) // File
            {
                _folderName = item.Parent;
                _fileName = item.Self;

                using var response = await Http.GetAsync($@"{apiBaseUrl}__getmockfolderfilecontents?folderName={_folderName}&fileName={_fileName}");
                var contents = await response.Content.ReadFromJsonAsync<string>();

                await _editor.SetValue(contents);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in OnLoadStart: {ex.Message}");
        }
    }
    #endregion // TreeView Events

    private async Task SaveMockFolderFile()
    {
        try
        {
            Console.WriteLine("Save Mock File");
            var fileContent = await _editor.GetValue();

            var fileDetails = new Dictionary<string, string>
            {
                { "filename", _fileName },
                { "foldername", _folderName },
                { "contents", fileContent }
            };

            using var response = await Http.PostAsJsonAsync($"{apiBaseUrl}__savemockfolderfile", fileDetails);

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task DeleteMockFolderFile()
    {
        try
        {
            Console.WriteLine("Delete Mock Folder File");

            if (!string.IsNullOrEmpty(_folderName))
            {
                var response = await Http.DeleteAsync($"{apiBaseUrl}__deletemockfolderfile?folderName={_folderName}&fileName={_fileName}");

                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    _fileName = "";
                    _folderName = "";
                    _editor.SetValue("");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in DeleteMockFolderFile: {ex.Message}");
        }
    }

    private async Task TestParameters()
    {
        try
        {
            Console.WriteLine($"TestParameters: 1 {_param1}, 2 {_param2}, 3 {_param3}, 4 {_param4}");

            await GetMockRoutes();

            //await GetMockMethods();

            var fullFileName = $"./Mocks/{_folderName}/{_fileName}";
            Console.WriteLine($"fullFileName {fullFileName}");

            //var url = GetUrl(fullFileName);
            var url = GetUrl(await _editor.GetValue());
            var urlWithParams = ParameteriseUrl(url, _param1, _param2, _param3, _param4);
            var combinedUrl = $"{apiBaseUrl}{urlWithParams}";
            Console.WriteLine($"combinedUrl: {combinedUrl}");

            var requestType = GetRequestType(await _editor.GetValue());
            Console.WriteLine($"requestType.ToLowerInvariant: {requestType.ToLowerInvariant()}");
            if (string.Equals("get", requestType.ToLower(), StringComparison.InvariantCultureIgnoreCase))
            {
                using var response = await Http.GetAsync($"{combinedUrl}");
                Console.WriteLine($"response.StatusCode {response.StatusCode}");
                //var results = await response.Content.ReadFromJsonAsync<string>();
                var results = await response.Content.ReadAsStringAsync();
                Console.WriteLine("=========================");
                Console.WriteLine($"results: {results}");
                Console.WriteLine("=========================");

                _results = results;
            }
            else if (string.Equals("put", requestType.Trim().ToLower(), StringComparison.InvariantCultureIgnoreCase))
            {
                var body = GetBody(await _editor.GetValue());
                Console.WriteLine($"Body: {body}");
                using var response = await Http.PutAsync($"{combinedUrl}", new StringContent("{}"));
                Console.WriteLine($"response.StatusCode {response.StatusCode}");
                //var results = await response.Content.ReadFromJsonAsync<string>();
                //var results = await response.Content.ReadAsStringAsync();
                Console.WriteLine("=========================");
                //Console.WriteLine($"results: {results}");
                Console.WriteLine($"results: {response.StatusCode}");
                Console.WriteLine("=========================");

                _results = response.StatusCode.ToString();
            }
            else if (requestType == "PUT")
            {
                Console.WriteLine("FOUND IT!!!");
            }
            else
            {
                Console.WriteLine($"RequestType not handled: {requestType}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in TestParameters: {ex.Message}");
        }
    }

    private string GetBody(string contents)
    {
        var body = "";

        try
        {
            var obj = JsonSerializer.Deserialize<JsonNode>(contents);
            body = JsonSerializer.Serialize(obj["request"]["body"]);
            
            Console.WriteLine($"GetBody: {body}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in GetBody: {ex.Message}");
        }

        return body;
    }

    private String GetRequestType(string contents)
    {
        var requestType = "";

        try
        {
            var obj = JsonSerializer.Deserialize<JsonNode>(contents);
            requestType = JsonSerializer.Serialize(obj["request"]["method"]);

            /*var methodIndex = contents.IndexOf("method");
            if (methodIndex == -1) return "NONE";

            var colonIndex = contents.IndexOf(":", methodIndex);
            if (colonIndex == -1) return "NONE";

            var commaIndex =  contents.IndexOf(",", colonIndex);
            if (commaIndex == -1) return "NONE";

            var methodText = contents.Substring(colonIndex + 1, commaIndex - colonIndex - 1);
            
            if (methodText.ToLowerInvariant().Contains("get"))
            {
                return "GET";
            }
            else if (methodText.ToLowerInvariant().Contains("put"))
            {
                return "PUT";
            }
            else if (methodText.ToLowerInvariant().Contains("post"))
            {
                return "POST";
            }
            else
            {
                return "ERROR";
            }*/

            Console.WriteLine($"GetRequestType: {requestType}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in GetRequestType: {ex.Message}");
            return "EXCEPTION";
        }

        return requestType as String;
    }

    private string GetUrl(string contents)
    {
        var url = "";

        Console.WriteLine($"GetUrl contents: {contents}");

        try
        {
            var obj = JsonSerializer.Deserialize<JsonNode>(contents);
            url = JsonSerializer.Serialize(obj["request"]["route"]);

        //using (StreamReader r = new StreamReader($"{filePath}"))
        //{
           // string json = r.ReadToEnd();
            
            /*var lines = contents.Split("/r/n");
            foreach (var line in lines)
            {
                if (line.Trim().Contains("\"route\""))
                {
                    Console.WriteLine($"route found on line: {line}");
                    var routeStart = line.IndexOf("\"route\"");
                    Console.WriteLine($"routeStart {routeStart}");
                    var subLine = line.Substring(routeStart + "\"route\"".Length);
                    var colonIndex = subLine.IndexOf(":");
                    Console.WriteLine($"colonIndex {colonIndex}");
                    subLine = subLine.Substring(colonIndex + 1).Trim();
                    var quotesIndex = subLine.IndexOf("\"");
                    Console.WriteLine($"quotesIndex {quotesIndex}");
                    subLine = subLine.Substring(quotesIndex + 1);
                    quotesIndex = subLine.IndexOf("\"");
                    Console.WriteLine($"quotesIndex {quotesIndex}");
                    url = subLine.Substring(0, quotesIndex);
                    Console.WriteLine($"url found: {url}");

                    if (url.StartsWith(@"/")) url = url.Substring(1);

                    return url;
                }
            }*/

            /*dynamic obj = JsonNode.Parse(contents);
            Console.WriteLine("obj1 created");
            var request = (string)obj["request"];
            Console.WriteLine("request");
            dynamic obj2 = JsonNode.Parse(obj);
            Console.WriteLine("obj2 created");
            url = (string)obj2["route"];*/

            Console.WriteLine($"GetUrl: {url}");

            //List<Item> items = JsonConvert.DeserializeObject<List<Item>>(json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in GetUrl {ex.Message}");
        }

        return url;
    }

    private async Task GetMockRoutes()
    {
        var mockRoutesUrl = $"{apiBaseUrl}__getmockroutes";
        using var responseRoutes = await Http.GetAsync($"{mockRoutesUrl}");
        Console.WriteLine($"response.StatusCode {responseRoutes.StatusCode}");
        var routes = await responseRoutes.Content.ReadAsStringAsync();
        var routeList = routes.Split(",");
        foreach (var route in routeList)
        {
            Console.WriteLine($"route: {route}");
        }
    }

    private async Task GetMockMethods()
    {
        var url = $"{apiBaseUrl}__getmockmethods";
        using var response = await Http.GetAsync($"{url}");
        Console.WriteLine($"response.StatusCode {response.StatusCode}");
        var methods = await response.Content.ReadAsStringAsync();
        var methodList = methods.Split(",");
        foreach (var method in methodList)
        {
            Console.WriteLine($"method: {method}");
        }
    }


    private string ParameteriseUrl(string url, string p1, string p2, string p3, string p4)
    {
        var finalUrl = url;

        var openingBracketIndex = 0;
        var pIndex = 0;
        var pValue = "";
        while (openingBracketIndex != -1)
        {
            pIndex++;
            openingBracketIndex = finalUrl.IndexOf('{', openingBracketIndex + 1);
            if (openingBracketIndex != -1)
            {
                var closingBracketIndex = finalUrl.IndexOf('}', openingBracketIndex);
                switch(pIndex)
                {
                    case 1:
                        pValue = p1;
                        break;
                    case 2:
                        pValue = p2;
                        break;
                    case 3:
                        pValue = p3;
                        break;
                    case 4:
                        pValue = p4;
                        break;
                }
                Console.WriteLine($"finalUrl.Length {finalUrl.Length} closingBracketIndex {closingBracketIndex}");
                if (finalUrl.Length - 1 == closingBracketIndex)
                {
                    finalUrl = $"{finalUrl.Substring(0, openingBracketIndex)}{pValue}";
                }
                else
                {
                    finalUrl = $"{finalUrl.Substring(0, openingBracketIndex)}{pValue}{finalUrl.Substring(closingBracketIndex + 1)}";
                }
            }
        }

        return finalUrl;
    }


    private async Task SaveMockFolder()
    {
        try
        {
            Console.WriteLine("Save Mock Folder");

            using var response = await Http.PostAsJsonAsync($"{apiBaseUrl}__savemockfolder", _folderName);

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await RefreshFolders();           
            }

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task DeleteMockFolder()
    {
        Console.WriteLine("Delete Mock Folder");

        var response = await Http.DeleteAsync($"{apiBaseUrl}__deletemockfolder?foldername={_folderName}");

        if (response.IsSuccessStatusCode)
        {
            await RefreshFolders();
        }

        if (!string.IsNullOrEmpty(response.ReasonPhrase))
        {
            Console.WriteLine(response.ReasonPhrase.ToUpperInvariant());
            _statusMessage = response.ReasonPhrase;
        }
    }

    private async Task RefreshFolders()
    {
        try
        {
            Console.WriteLine("Refresh Folders 1");

            using var response = await Http.GetAsync($"{apiBaseUrl}__getmockfolders");
            Console.WriteLine($"GetMockFolders response {response.StatusCode}");
            var folders = await response.Content.ReadFromJsonAsync <List<string>>();
            if (folders == null)
            {
                Console.WriteLine("No folders found");
            }
            else
                Console.WriteLine($"Folders Count: {folders.Count}");

            foreach (var f in folders)
            {
                Console.WriteLine($"{f}");
            }
            //_rootItem.Clear();
            Console.WriteLine("Refresh Folders 2");

            RemoveMissingFoldersFromRootItem(folders);
            _rootItem = await Task.Run(() =>  PopulateRootItem(folders));
            Console.WriteLine($"Refresh Folders 3 {_rootItem.Count}");

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in GetMockFolderFiles: {ex.Message}");
        }
    }

    private async Task<List<Item>> PopulateRootItem(List<string> folders)
    {
        var itemList = new List<Item>();

        foreach (var folderName in folders)
        {
            var found = false;
            var index = 0;
            foreach (var item in _rootItem)
            {
                if (string.Compare(item.Self, folderName) > 0)
                {
                    itemList.Insert(index, new Item { Self = folderName, Level = 0 });
                    found = true;
                    break;
                }
                if (item.Self == folderName)
                {
                    found = true;
                    break;
                }
                index++;
            }

            if (!found)
            {
                itemList.Add(new Item { Self = folderName, Level = 0 });
            }    
        }

        return itemList;
    }

    private void RemoveMissingFoldersFromRootItem(List<string> folders)
    {
        List<Item> removeList = new List<Item>();

        foreach (var item in _rootItem)
        {
            var found = false;
            foreach (var folder in folders)
            {
                if (folder == item.Self)
                {
                    found = true;
                    break;
                }
            }

            if (!found)
                removeList.Add(item);
        }

        foreach (var item in removeList)
        {
            _rootItem.Remove(item);
        }
    }

    private async Task SaveButtonClick()
    {
        /*HttpClient client = new HttpClient();
        var values = new Dictionary<string, string>
        {
            { "username", "myUser" },
            { "password", "myPassword" }
        };

        string url = "http://127.0.0.1:5010";
        var data = new FormUrlEncodedContent(values);
        var response = await client.PostAsync(url, data);*/
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "javascript",
                GlyphMargin = true,
                Value = ""
                /*"\"use strict\";\n" +
                    "function Person(age) {\n" +
                        "	if (age) {\n" +
                        "		this.age = age;\n" +
                        "	}\n" +
                        "}\n" +
                        "Person.prototype.getAge = function () {\n" +
                        "	return this.age;\n" +
                        "};\n"*/
            };
    }

    private async Task EditorOnDidInit()
    {
        /*await _editor.AddCommand((int)BlazorMonaco.KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        decorationIds = await _editor.DeltaDecorations(null, newDecorations);*/
        // You can now use 'decorationIds' to change or remove the decorations
    }
    private string[] decorationIds = new string[0];

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }
}