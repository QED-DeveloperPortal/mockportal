@page "/lazy"
@using System.Net.Http;
@using System.Net.Http.Json;
@inject HttpClient Http

<div>
    <TreeView Items="_rootItem" AllowSelection="false" GetChildren="GetChildren" HasChildren="HasChildren" >
        <ItemTemplate>
            <div>
                <label @onclick="() => OnSelect(context.Item)" >@context.Item.Self</label>
            </div>
        </ItemTemplate>
    </TreeView>
</div>

<div style="margin:10px 0;">
    <label style="color: red;">@_statusMessage</label>
</div>

<div style="margin:10px 0;">
    <button @onclick="SaveMockFolder">Save Folder</button>
    Folder: <input type="text" @bind="_folderName" style="width: 150px;" />
    <button @onclick="DeleteMockFolder">Delete Folder</button>
</div>
<div style="margin:10px 0;">
    <button @onclick="SaveMockFolderFile">Save JSON (Ctrl+J)</button>
    Filename: <input type="text" @bind="_fileName" style="width: 150px;" />
    <button @onclick="DeleteMockFolderFile">Delete File</button>
</div>

<div style="margin:10px 0; height:250px;">
    <StandaloneCodeEditor @ref="_editor" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" CssClass="editor-class" />
</div>

<div style="margin:10px 0;">
    Parameter 1: <input type="text" @bind="_parameter1" style="width: 300px;" />
</div>

<div style="margin:10px 0;">
    Parameter 2: <input type="text" @bind="_parameter2" style="width: 300px;" />
</div>

<div style="margin:10px 0;">
    Parameter 3: <input type="text" @bind="_parameter3" style="width: 300px;" />
</div>

<div style="margin:10px 0;">
    Parameter 4: <input type="text" @bind="_parameter4" style="width: 300px;" />
</div>

<div style="margin:10px 0;">
    <button @onclick="TestClick">Test</button>
</div>

<div style="margin:10px 0;">
    Results: <textarea id="results" @bind="_results" name="text" rows="10" cols="50"></textarea>
</div>

@code {
    private string selectedItem;

    private List<Item> SelectedValues = new List<Item>();

    private StandaloneCodeEditor _editor = null!;
    private string _valueToSet = "";
    private string _fileName = "";
    private string _folderName = "";
    private string _statusMessage = "";

    private string _parameter1 = "";
    private string _parameter2 = "";
    private string _parameter3 = "";
    private string _parameter4 = "";
    private string _results = "";

    private class Item
    {
        public string Self { get; set; }
        public int Level { get; set; }
        public string Parent { get; set; }
    }

    private List<Item> _rootItem = new List<Item>();

    private Object _lock = new Object();
    private List<Item> GetChildren(Item item)
    {
        {
            if (!initialised || string.IsNullOrEmpty(item.Self)) return null;

            if (item.Level == 0)
            {
                using var response = Http.GetAsync($"http://localhost:5010/__getmockfolderfiles/?folderName={item.Self}").Result;
                var preResult = response.Content.ReadFromJsonAsync<string[]>();
                if (preResult.Status == TaskStatus.Faulted) return null;

                var results = preResult.Result;
                Console.WriteLine(response.StatusCode.ToString());
                var items = new List<Item>();
                foreach (var result in results)
                {
                    if (!string.IsNullOrEmpty(result.Trim()))
                    {
                        items.Add(new Item { Self = result, Level = 1, Parent = item.Self });
                    }
                }

                return items;
            }
        }

        return null;
    }

    private bool HasChildren(Item item)
    {
        return (item.Self.Length < 100);
    }

    private string GetParent(string item)
    {
        var last_period = item.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return item.Substring(0, last_period);
        }
    }

    bool initialised = false;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        await RefreshFolders();

        initialised = true;
    }

    #region TreeView Events
    private async Task OnLoadStart()
    {
        try
        {
            Console.WriteLine("ONLOADSTART");

            await RefreshFolders();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in OnLoadStart: {ex.Message}");
        }
    }

    private async Task OnSelect(Item item)
    {
        try
        {
            Console.WriteLine("ONSELECT");

            if (!initialised) return;

            if (item.Level == 0) // Folder
            {
                _folderName = item.Self;
            }
            else if (item.Level == 1) // File
            {
                _folderName = item.Parent;
                _fileName = item.Self;

                using var response = await Http.GetAsync($@"http://localhost:5010/__getmockfolderfilecontents?folderName={_folderName}&fileName={_fileName}");
                var contents = await response.Content.ReadFromJsonAsync<string>();

                await _editor.SetValue(contents);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in OnLoadStart: {ex.Message}");
        }
    }
    #endregion // TreeView Events

    private async Task SaveMockFolderFile()
    {
        try
        {
            Console.WriteLine("Save Mock File");
            var fileContent = await _editor.GetValue();

            var fileDetails = new Dictionary<string, string>
            {
                { "filename", _fileName },
                { "foldername", _folderName },
                { "contents", fileContent }
            };

            using var response = await Http.PostAsJsonAsync("http://localhost:5010/__savemockfolderfile", fileDetails);

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task DeleteMockFolderFile()
    {
        try
        {
            Console.WriteLine("Delete Mock Folder File");

            if (!string.IsNullOrEmpty(_folderName))
            {
                var response = await Http.DeleteAsync($"http://localhost:5010/__deletemockfolderfile?folderName={_folderName}&fileName={_fileName}");

                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    _fileName = "";
                    _folderName = "";
                    _editor.SetValue("");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in DeleteMockFolderFile: {ex.Message}");
        }
    }

    private async Task SaveMockFolder()
    {
        try
        {
            Console.WriteLine("Save Mock Folder");

            using var response = await Http.PostAsJsonAsync("http://localhost:5010/__savemockfolder", _folderName);

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await RefreshFolders();           
            }

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task DeleteMockFolder()
    {
        Console.WriteLine("Delete Mock Folder");

        var response = await Http.DeleteAsync($"http://localhost:5010/__deletemockfolder?foldername={_folderName}");

        if (response.IsSuccessStatusCode)
        {
            await RefreshFolders();
        }

        if (!string.IsNullOrEmpty(response.ReasonPhrase))
        {
            Console.WriteLine(response.ReasonPhrase.ToUpperInvariant());
            _statusMessage = response.ReasonPhrase;
        }
    }

    private async Task RefreshFolders()
    {
        try
        {
            Console.WriteLine("Get Mock Folders");

            using var response = await Http.GetAsync($"http://localhost:5010/__getmockfolders");
            var folders = await response.Content.ReadFromJsonAsync <List<string>>();
            RemoveMissingFoldersFromRootItem(folders);
            foreach (var folderName in folders)
            {
                var found = false;
                var index = 0;
                foreach (var item in _rootItem)
                {
                    if (string.Compare(item.Self, folderName) > 0)
                    {
                        _rootItem.Insert(index, new Item { Self = folderName, Level = 0 });
                        found = true;
                        break;
                    }
                    if (item.Self == folderName)
                    {
                        found = true;
                        break;
                    }
                    index++;
                }

                if (!found)
                {
                    _rootItem.Add(new Item { Self = folderName, Level = 0 });
                }
            }

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in GetMockFolderFiles: {ex.Message}");
        }
    }

    private void RemoveMissingFoldersFromRootItem(List<string> folders)
    {
        List<Item> removeList = new List<Item>();

        foreach (var item in _rootItem)
        {
            var found = false;
            foreach (var folder in folders)
            {
                if (folder == item.Self)
                {
                    found = true;
                    break;
                }
            }

            if (!found)
                removeList.Add(item);
        }

        foreach (var item in removeList)
        {
            _rootItem.Remove(item);
        }
    }

    private async Task SaveButtonClick()
    {
        HttpClient client = new HttpClient();
        var values = new Dictionary<string, string>
        {
            { "username", "myUser" },
            { "password", "myPassword" }
        };

        string url = "http://localhost:5010";
        var data = new FormUrlEncodedContent(values);
        var response = await client.PostAsync(url, data);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "javascript",
                GlyphMargin = true,
                Value = ""
            };
    }

    private async Task EditorOnDidInit()
    {
        await _editor.AddCommand((int)BlazorMonaco.KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        decorationIds = await _editor.DeltaDecorations(null, newDecorations);
        // You can now use 'decorationIds' to change or remove the decorations
    }
    private string[] decorationIds = new string[0];

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    #region Mock Testing
    private async Task TestClick()
    {
        //HttpClient client = new HttpClient();
        //var values = new Dictionary<string, string>
        //{
        //    { "username", "myUser" },
        //    { "password", "myPassword" }
        //};

        //string url = "http://localhost:5010";
        //var data = new FormUrlEncodedContent(values);
        //var response = await client.PostAsync(url, data);
    }
    #endregion // Mock Testing
}