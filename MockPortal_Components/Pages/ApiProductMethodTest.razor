@using MockPortal_Components;

@page "/apiproductmethodtest/{groupcode}/{id}"

@*@attribute [Route(Constants.ApiProductMethodTestPageUrl)]*@

@using System.Net.Http;
@using System.Net.Http.Json;
@using System.IO;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@inject HttpClient Http
@inject IJSRuntime JS
@implements IAsyncDisposable

<div>
    <section class="api-master-container">
        <div class="api-header-block">
            @* <a href='@string.Format("/apiproductmethods/{0}", groupcode)' class="api-header-nav-link"> *@
            <a href="@($"{Constants.UrlPrefix}/apiproductmethods/{groupcode}")" class="api-header-nav-link">
                <i class="fas fa-chevron-left"></i>
            </a>
            <h1 class="block-header">@appCatalogMethod.DomainName</h1>
        </div>
        <div class="api-block">
            <div class="page-taxonomy tag-@appCatalogMethod.MethodType" title="@appCatalogMethod.MethodType" rel="tag">@appCatalogMethod.MethodType</div>
            <div class="api-link">@(appCatalogMethod.MethodPrefix + appCatalogMethod.Method)</div>
        </div>
        <h2 class="api-header">Model</h2>
        <pre>
        <code id="api-input" class="api-model-input">@model</code>
        </pre>

        <h2 class="api-header">Request</h2>


        @* @if (@method.DomainName != currentDomainName)
            {
                <h3 class="api-header">@method.DomainName</h3>
                currentDomainName = @method.DomainName;
            }
            <article class="api-container">
                <div class="page-taxonomy tag-@method.MethodType.ToLower()" title="@method.MethodType" rel="tag">@method.MethodType</div>
                <div class="api-detail-container">
                    <div class="api-name">@(method.MethodPrefix + method.Method)</div>
                    <div class="api-description">@method.MethodDescription</div>
                </div>
                <div class="api-link-container">
                    <a onclick=@(() => OpenApiProductMethodTest(method.Id)) class="api-nav-link">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </div>
            </article> *@

        @foreach (var qp in queryParameters)
        {
            <div class="request-label">
                <span>@qp</span>
                <span role="alert" class="alert">Required</span>
            </div>
            <input type="text" class="api-request-input" />
        }

        <div class="btn-container">
            <button class="btn-active" style="float: right;">Execute</button>
        </div>

        <h2 class="api-header">Response</h2>
        <pre>
        <code id="api-response" class="api-model-response">@response</code>
        </pre>
    </section>
</div>

@code {

    [Parameter]
    public string groupcode { get; set; }

    [Parameter]
    public string id { get; set; }

    AppCatalogMethod appCatalogMethod = new AppCatalogMethod();
    string model = "";
    List<string> queryParameters = new List<string>();
    string response = "";

    @* [CascadingParameter] public IModalService Modal { get; set; } = default!; *@

    private string selectedItem;

    private List<Item> SelectedValues = new List<Item>();

    private List<Item> SelectedItems = new List<Item>();

    private StandaloneCodeEditor _editor = null!;
    private string _valueToSet = "";
    private string _fileName = "";
    private string _folderName = "";
    private string _statusMessage = "";

    private string _param1 = "";
    private string _param2 = "";
    private string _param3 = "";
    private string _param4 = "";

    private string _results = "";

    private string _errorMessage = "";

    public async ValueTask DisposeAsync()
    {

    }

    private class Item
    {
        public string Self { get; set; }
        public int Level { get; set; }
        public string Parent { get; set; }
    }

    private List<Item> _rootItem = new List<Item>();

    private Object _lock = new Object();

    private async Task<List<Item>> GetChildrenAsync(Item item)
    {
        //Console.WriteLine("GetChildren");

        if (item == null)
        {
            Console.WriteLine("return _rootItem");
            return _rootItem;
        }
        else if (item.Level == 0)
        {
            Console.WriteLine("item.Level == 0");
            using var response = await Http.GetAsync($"{Constants.ApiBaseUrl}__getmockfolderfiles/?folderName={item.Self}");
            var results = await response.Content.ReadFromJsonAsync<string[]>();

            var items = new List<Item>();
            foreach (var result in results)
            {
                if (!string.IsNullOrEmpty(result.Trim()))
                {
                    items.Add(new Item { Self = result, Level = 1, Parent = item.Self });
                }
            }

            Console.WriteLine("returning Level 1 items");
            return items;
        }
        else
        {
            Console.WriteLine($"else {item.Self}");
            return _rootItem;
        }
    }

    private async Task<bool> HasChildrenAsync(Item item)
    {
        if (item.Level == 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private string GetParent(string item)
    {
        var last_period = item.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return item.Substring(0, last_period);
        }
    }

    bool initialised = false;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"ApiProductMethodTest::OnInitializedAsync {id}");

        await GetAppCatalogMethod(id);
        await GetModel(groupcode, appCatalogMethod.DomainName, appCatalogMethod.Method);
        await GetQueryParameters(groupcode, appCatalogMethod.DomainName, appCatalogMethod.Method);
        //await GetResponse(groupcode, appCatalogMethod.DomainName, appCatalogMethod.Method);

        initialised = true;
        Console.WriteLine("OnInitializedAsync complete");
    }

    #region TreeView Events
    private async Task OnLoadStart()
    {
        try
        {
            Console.WriteLine("ONLOADSTART");

            _errorMessage = "LOADED!";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in OnLoadStart: {ex.Message}");
        }
    }

    private async Task GetAppCatalogMethod(string Id)
    {
        try
        {
            Console.WriteLine($"GetAppCatalogMethod groupCode:{groupcode} Id: {Id}");

            using var response = await Http.GetAsync($"{Constants.ApiBaseUrl}__getappcatalogmethod?groupCode={groupcode}&id={Id}");
            Console.WriteLine($"GetAppCatalogMethod response {response.StatusCode}");
            appCatalogMethod = await response.Content.ReadFromJsonAsync<AppCatalogMethod>();
            if (appCatalogMethod == null)
            {
                Console.WriteLine("No App Catalog Method Found");
            }
            else
                Console.WriteLine($"AppCatalogMethod: {appCatalogMethod.ToString()}");

            Console.WriteLine($"{appCatalogMethod.GroupCode}, {appCatalogMethod.DomainName}, {appCatalogMethod.MethodType}, {appCatalogMethod.MethodPrefix}, {appCatalogMethod.Method}, {appCatalogMethod.MethodDescription}, {appCatalogMethod.FileName}");

        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetAppCatalogMethod: {ex.Message}");
        }
    }

    private async Task GetModel(string groupCode, string domainName, string method)
    {
        try
        {
            Console.WriteLine($"GetModel groupCode:{groupcode} DomainName: {domainName} Method:{method}");

            using var response = await Http.GetAsync($"{Constants.ApiBaseUrl}__getmodel?groupCode={groupcode}&domainName={domainName}&method={method}");
            Console.WriteLine($"GetModel response {response.StatusCode}");
            model = await response.Content.ReadAsStringAsync();
            if (appCatalogMethod == null)
            {
                Console.WriteLine("No Model Found");
            }
            else
                Console.WriteLine($"MODEL: {model}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetModel: {ex.Message}");
        }
    }

    private async Task GetQueryParameters(string groupCode, string domainName, string method)
    {
        try
        {
            Console.WriteLine($"GetQueryParameters groupCode:{groupcode} DomainName: {domainName} Method:{method}");

            using var response = await Http.GetAsync($"{Constants.ApiBaseUrl}__getqueryparameters?groupCode={groupcode}&domainName={domainName}&method={method}");
            Console.WriteLine($"GetQueryParameters response {response.StatusCode}");
            queryParameters = await response.Content.ReadFromJsonAsync<List<string>>();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetQueryParameters: {ex.Message}");
        }
    }

    private async Task GetResponse(string groupCode, string domainName, string method)
    {
        try
        {
            Console.WriteLine($"GetResponse groupCode:{groupcode} DomainName: {domainName} Method:{method}");

            using var apiResponse = await Http.GetAsync($"{Constants.ApiBaseUrl}__getresponse?groupCode={groupcode}&domainName={domainName}&method={method}");
            Console.WriteLine($"GetResponse apiResponse {apiResponse.StatusCode}");
            response = await apiResponse.Content.ReadAsStringAsync();
            if (appCatalogMethod == null)
            {
                Console.WriteLine("No Response Found");
            }
            else
                Console.WriteLine($"MODEL: {response}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetResponse: {ex.Message}");
        }
    }

    private async Task GetCode(string Id)
    {
        using var response = await Http.GetAsync($@"{Constants.ApiBaseUrl}__getmockfolderfilecontents?folderName={_folderName}&fileName={_fileName}");
        var contents = await response.Content.ReadFromJsonAsync<string>();

        await _editor.SetValue(contents);

        //using System.Text.Json;ch

        //var jsonString = JsonSerializer.Serialize(yourObj, new JsonSerializerOptions { WriteIndented = true });
    }

    @* void ShowModalCustomOverlay()
        {
            var options = new ModalOptions { OverlayCustomClass = "custom-modal-overlay" };
            Modal.Show<Confirm>("Custom Overlay", options);
        }

        void PositionCustom(ModalPosition position)
        {
            var options = new ModalOptions { Position = position };

            if (position == ModalPosition.Custom)
                options.PositionCustomClass = "my-custom-position";

            //options.HideCloseButton = true;
            //options.HideHeader = true;

            Modal.Show<Confirm>($"Position: {position}", options);
        } *@

    //void ShowYesNoModal() => Modal.Show<YesNoPrompt>("Are you sure you want to delete this record?");

    @* async Task<ModalResult> ShowConfirmDeleteModal()
        {
            var modal = Modal.Show<Confirm>("Are you sure you want to delete this record?");
            var result = await modal.Result;

            if (!result.Cancelled && (result.Data is bool accepted) && accepted)
            {
                //Navigator.NavigateTo ("/");
                return result;
            }

            return result;
        } *@

    #endregion // TreeView Events

    private async Task SaveMockFolderFile()
    {
        try
        {
            Console.WriteLine("Save Mock File");
            var fileContent = await _editor.GetValue();

            if (string.IsNullOrEmpty(fileContent))
            {
                _errorMessage = "No REST API content";
                return;
            }

            var fileDetails = new Dictionary<string, string>
        {
                { "filename", _fileName },
                { "foldername", _folderName },
                { "contents", fileContent }
            };

            using var response = await Http.PostAsJsonAsync($"{Constants.ApiBaseUrl}__savemockfolderfile", fileDetails);

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task DeleteMockFolderFile()
    {
        try
        {
            _errorMessage = "";

            Console.WriteLine("Delete Mock Folder File");

            if (string.IsNullOrEmpty(_folderName))
            {
                _errorMessage = "No folder specified to delete";
                return;
            }

            if (string.IsNullOrEmpty(_fileName))
            {
                _errorMessage = "No file specified to delete";
                return;
            }

            //if (!await JS.InvokeAsync<bool>(
            //    "confirm", $"Are you sure you want to delete the file '{_fileName}' from folder '{_folderName}'?"))
            //return;

            @* var result = await ShowConfirmDeleteModal();
                var resultText = result.Confirmed ? "YES!" : "NO!";
                Console.WriteLine($"ShowConfirmDeleteModal: {resultText}");
                return; *@

            return;

            var response = await Http.DeleteAsync($"{Constants.ApiBaseUrl}__deletemockfolderfile?folderName={_folderName}&fileName={_fileName}");

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                _fileName = "";
                _folderName = "";
                await _editor.SetValue("");
            }

        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in DeleteMockFolderFile: {ex.Message}");
        }
    }

    private async Task TestParameters()
    {
        try
        {
            Console.WriteLine($"TestParameters: 1 {_param1}, 2 {_param2}, 3 {_param3}, 4 {_param4}");

            _errorMessage = "";

            if (string.IsNullOrEmpty(_folderName) || string.IsNullOrEmpty(_fileName))
            {
                _errorMessage = "Please select an API";
                return;
            }

            await GetMockRoutes();

            //await GetMockMethods();

            var fullFileName = $"./Mocks/{_folderName}/{_fileName}";
            Console.WriteLine($"fullFileName {fullFileName}");

            var url = GetUrl(await _editor.GetValue());
            var urlWithParams = ParameteriseUrl(url, _param1, _param2, _param3, _param4);
            var combinedUrl = $"{Constants.ApiBaseUrl}{urlWithParams}";
            Console.WriteLine($"combinedUrl: {combinedUrl}");

            var requestType = GetRequestType(await _editor.GetValue());
            if (requestType.ToLowerInvariant().Contains("get"))
            {
                using var response = await Http.GetAsync($"{combinedUrl}");
                Console.WriteLine($"response.StatusCode {response.StatusCode}");
                var results = await response.Content.ReadAsStringAsync();
                Console.WriteLine("=========================");
                Console.WriteLine($"results: {results}");
                Console.WriteLine("=========================");

                _results = results;
            }
            else if (requestType.ToLowerInvariant().Contains("put"))
            {
                var body = GetBody(await _editor.GetValue());
                Console.WriteLine($"Body: {body}");
                using var response = await Http.PutAsync($"{combinedUrl}", new StringContent(body));
                Console.WriteLine($"response.StatusCode {response.StatusCode}");
                Console.WriteLine("=========================");
                Console.WriteLine($"results: {response.StatusCode}");
                Console.WriteLine("=========================");

                _results = response.StatusCode.ToString();
            }
            else
            {
                Console.WriteLine($"RequestType not handled: {requestType}");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in TestParameters: {ex.Message}");
        }
    }

    private string GetBody(string contents)
    {
        var body = "";

        try
        {
            var obj = JsonSerializer.Deserialize<JsonNode>(contents);
            body = JsonSerializer.Serialize(obj["request"]["body"]);

            Console.WriteLine($"GetBody: {body}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetBody: {ex.Message}");
        }

        return body;
    }

    private String GetRequestType(string contents)
    {
        var requestType = "";

        try
        {
            var obj = JsonSerializer.Deserialize<JsonNode>(contents);
            requestType = JsonSerializer.Serialize(obj["request"]["method"]);
            requestType = requestType.Replace("\"", "");
            requestType = requestType.Replace("\'", "");

            Console.WriteLine($"GetRequestType: {requestType}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetRequestType: {ex.Message}");
            return "EXCEPTION";
        }

        return requestType;
    }

    private string GetUrl(string contents)
    {
        var url = "";

        Console.WriteLine($"GetUrl contents: {contents}");

        try
        {
            var obj = JsonSerializer.Deserialize<JsonNode>(contents);
            url = JsonSerializer.Serialize(obj["request"]["route"]);
            url = url.Replace("\"", "");
            url = url.Replace("\'", "");

            Console.WriteLine($"GetUrl: {url}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetUrl {ex.Message}");
        }

        return url;
    }

    private async Task GetMockRoutes()
    {
        var mockRoutesUrl = $"{Constants.ApiBaseUrl}__getmockroutes";
        using var responseRoutes = await Http.GetAsync($"{mockRoutesUrl}");
        Console.WriteLine($"response.StatusCode {responseRoutes.StatusCode}");
        var routes = await responseRoutes.Content.ReadAsStringAsync();
        var routeList = routes.Split(",");
        foreach (var route in routeList)
        {
            Console.WriteLine($"route: {route}");
        }
    }

    private async Task GetMockMethods()
    {
        var url = $"{Constants.ApiBaseUrl}__getmockmethods";
        using var response = await Http.GetAsync($"{url}");
        Console.WriteLine($"response.StatusCode {response.StatusCode}");
        var methods = await response.Content.ReadAsStringAsync();
        var methodList = methods.Split(",");
        foreach (var method in methodList)
        {
            Console.WriteLine($"method: {method}");
        }
    }

    private List<string> GetUrlParameterNames(string url)
    {
        var parameterNames = new List<string>();

        return parameterNames;
    }
    private string ParameteriseUrl(string url, string p1, string p2, string p3, string p4)
    {
        var finalUrl = url;

        try
        {
            var openingBracketIndex = 0;
            var pIndex = 0;
            var pValue = "";
            while (openingBracketIndex != -1)
            {
                pIndex++;
                openingBracketIndex = finalUrl.IndexOf('{', openingBracketIndex + 1);
                if (openingBracketIndex != -1)
                {
                    var closingBracketIndex = finalUrl.IndexOf('}', openingBracketIndex);
                    switch (pIndex)
                    {
                        case 1:
                            pValue = p1;
                            break;
                        case 2:
                            pValue = p2;
                            break;
                        case 3:
                            pValue = p3;
                            break;
                        case 4:
                            pValue = p4;
                            break;
                    }
                    Console.WriteLine($"finalUrl.Length {finalUrl.Length} closingBracketIndex {closingBracketIndex}");
                    if (finalUrl.Length - 1 == closingBracketIndex)
                    {
                        finalUrl = $"{finalUrl.Substring(0, openingBracketIndex)}{pValue}";
                    }
                    else
                    {
                        finalUrl = $"{finalUrl.Substring(0, openingBracketIndex)}{pValue}{finalUrl.Substring(closingBracketIndex + 1)}";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in ParameteriseUrl: {ex.Message}");
        }

        return finalUrl;
    }


    private async Task SaveMockFolder()
    {
        try
        {
            _errorMessage = "";

            Console.WriteLine("Save Mock Folder");

            if (string.IsNullOrEmpty(_folderName))
            {
                _errorMessage = "Please specify a folder name to save";
                return;
            }

            using var response = await Http.PostAsJsonAsync($"{Constants.ApiBaseUrl}__savemockfolder", _folderName);

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                //await RefreshFolders();
            }

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task DeleteMockFolder()
    {
        Console.WriteLine("Delete Mock Folder");

        try
        {
            _errorMessage = "";

            if (string.IsNullOrEmpty(_folderName))
            {
                _errorMessage = "No mock folder specified to delete";
                return;
            }

            var response = await Http.DeleteAsync($"{Constants.ApiBaseUrl}__deletemockfolder?foldername={_folderName}");

            if (response.IsSuccessStatusCode)
            {
                //await RefreshFolders();
            }

            if (!string.IsNullOrEmpty(response.ReasonPhrase))
            {
                Console.WriteLine(response.ReasonPhrase.ToUpperInvariant());
                _statusMessage = response.ReasonPhrase;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in DeleteMockFolder: {ex.Message}");
        }
    }

    private async Task RefreshFolders()
    {
        try
        {
            Console.WriteLine("Refresh Folders 1");

            using var response = await Http.GetAsync($"{Constants.ApiBaseUrl}__getmockfolders");
            Console.WriteLine($"GetMockFolders response {response.StatusCode}");
            var folders = await response.Content.ReadFromJsonAsync<List<string>>();
            if (folders == null)
            {
                Console.WriteLine("No folders found");
            }
            else
                Console.WriteLine($"Folders Count: {folders.Count}");

            foreach (var f in folders)
            {
                Console.WriteLine($"{f}");
            }
            //_rootItem.Clear();
            Console.WriteLine("Refresh Folders 2");

            RemoveMissingFoldersFromRootItem(folders);
            _rootItem = await Task.Run(() => PopulateRootItem(folders));
            Console.WriteLine($"Refresh Folders 3 {_rootItem.Count}");

            Console.WriteLine(response.StatusCode.ToString());
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception in GetMockFolderFiles: {ex.Message}");
        }
    }

    private async Task<List<Item>> PopulateRootItem(List<string> folders)
    {
        var itemList = new List<Item>();

        foreach (var folderName in folders)
        {
            var found = false;
            var index = 0;
            foreach (var item in _rootItem)
            {
                if (string.Compare(item.Self, folderName) > 0)
                {
                    itemList.Insert(index, new Item { Self = folderName, Level = 0 });
                    found = true;
                    break;
                }
                if (item.Self == folderName)
                {
                    found = true;
                    break;
                }
                index++;
            }

            if (!found)
            {
                itemList.Add(new Item { Self = folderName, Level = 0 });
            }
        }

        return itemList;
    }

    private void RemoveMissingFoldersFromRootItem(List<string> folders)
    {
        List<Item> removeList = new List<Item>();

        foreach (var item in _rootItem)
        {
            var found = false;
            foreach (var folder in folders)
            {
                if (folder == item.Self)
                {
                    found = true;
                    break;
                }
            }

            if (!found)
                removeList.Add(item);
        }

        foreach (var item in removeList)
        {
            _rootItem.Remove(item);
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "javascript",
            GlyphMargin = true,
            Value = ""
        };
    }

    private async Task EditorOnDidInit()
    {
        /*await _editor.AddCommand((int)BlazorMonaco.KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        decorationIds = await _editor.DeltaDecorations(null, newDecorations);*/
        // You can now use 'decorationIds' to change or remove the decorations
    }
    private string[] decorationIds = new string[0];

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }
}